import threading
import time
from logs.logging import logger
from bingx import BingXWebSocket
from bybit import BybitWebSocket
from htx import HTXWebSocket
from okx import OKXWebSocket

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
prices_dict = {
    'BTCUSDT': {},
    'ETHUSDT': {},
    'SOLUSDT': {},
    'XRPUSDT': {},
    'DOGEUSDT': {},
    'SUIUSDT': {},
    'LTCUSDT': {},
    'IPUSDT': {},
    'ADAUSDT': {},
    'TONUSDT': {}
}

# –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.2%)
ARBITRAGE_THRESHOLD = 0.002  # 0.2% –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ
TRADING_FEE = 0.001  # 0.1% –∫–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebSocket
def run_bingx():
    print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º BingX WebSocket")
    bingx_ws = BingXWebSocket(prices_dict)
    bingx_ws.start()

def run_bybit():
    print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Bybit WebSocket")
    bybit_ws = BybitWebSocket(prices_dict)
    bybit_ws.start()

def run_htx():
    print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º HTX WebSocket")
    htx_ws = HTXWebSocket(prices_dict)
    htx_ws.start()

def run_okx():
    print("üîπ –ó–∞–ø—É—Å–∫–∞–µ–º OKX WebSocket")
    okx_ws = OKXWebSocket(prices_dict)
    okx_ws.start()


# –ó–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–∞—Ö
threads = [
    threading.Thread(target=run_bingx, daemon=True),
    threading.Thread(target=run_bybit, daemon=True),
    threading.Thread(target=run_htx, daemon=True),
    threading.Thread(target=run_okx, daemon=True),
]

for thread in threads:
    thread.start()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
def find_arbitrage_opportunities(prices):
    while True:
        for symbol, exchanges in prices.items():
            best_bid = None
            best_ask = None
            bid_exchange = None
            ask_exchange = None

            # –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ (ask) –∏ –ø—Ä–æ–¥–∞–∂–∏ (bid)
            for exchange, data in exchanges.items():
                bid = data.get("bid")
                ask = data.get("ask")

                if bid and (best_bid is None or bid > best_bid):
                    best_bid = bid
                    bid_exchange = exchange

                if ask and (best_ask is None or ask < best_ask):
                    best_ask = ask
                    ask_exchange = exchange

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
            if best_bid and best_ask and best_bid > best_ask:
                profit_percent = (best_bid - best_ask) / best_ask

                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (–¥–≤–µ —Å–¥–µ–ª–∫–∏ ‚Äî –ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞)
                net_profit_percent = profit_percent - 2 * TRADING_FEE
                if net_profit_percent > ARBITRAGE_THRESHOLD:
                    txt = f'''–ú–æ–Ω–µ—Ç–∞: {symbol} —Å —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª—å—é {net_profit_percent * 100:.2f}%!
                    –ö—É–ø–∏—Ç—å –Ω–∞ {ask_exchange} –∑–∞ {best_ask}
                    –ü—Ä–æ–¥–∞—Ç—å –Ω–∞ {bid_exchange} –∑–∞ {best_bid}'''
                    logger.info(txt)

        time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
arbitrage_thread = threading.Thread(target=find_arbitrage_opportunities, args=(prices_dict,), daemon=True)
arbitrage_thread.start()

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
while True:
    time.sleep(1)
