import json
import websocket
import gzip
import io
import threading
import time
from logs.logging import logger

# URL WebSocket BingX
BINGX_WS_URL = "wss://open-api-swap.bingx.com/swap-market"

# –ú–æ–Ω–µ—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–≥–ª—É–±–∏–Ω–∞ 5, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 500 –º—Å)
PAIRS = ['BTC-USDT', 'ETH-USDT', 'SOL-USDT', 'XRP-USDT', 'DOGE-USDT', 'SUI-USDT', 'LTC-USDT', 'IP-USDT', 'ADA-USDT',
         'TON-USDT'] # –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TON
SUBSCRIPTIONS = [{"id": "bingx-depth", "reqType": "sub", "dataType": f"{pair}@depth5@500ms"} for pair in PAIRS]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω
bingx_prices = {
    'BTCUSDT': {},
    'ETHUSDT': {},
    'SOLUSDT': {},
    'XRPUSDT': {},
    'DOGEUSDT': {},
    'SUIUSDT': {},
    'LTCUSDT': {},
    'IPUSDT': {},
    'ADAUSDT': {},
    'TONUSDT': {}
}


# –ö–ª–∞—Å—Å WebSocket –¥–ª—è BingX
class BingXWebSocket:
    def __init__(self, prices):
        self.ws = None
        self.prices = prices
        self.reconnect = True  # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    def on_open(self, ws):
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket BingX")
        for sub in SUBSCRIPTIONS:
            ws.send(json.dumps(sub))
            print("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", sub)

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ Gzip
    def decode_message(self, message):
        compressed_data = gzip.GzipFile(fileobj=io.BytesIO(message), mode="rb")
        decompressed_data = compressed_data.read()
        return decompressed_data.decode("utf-8")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    def on_message(self, ws, message):
        utf8_data = self.decode_message(message)
        data = json.loads(utf8_data)
        if "ping" in data:  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –ø–∏–Ω–≥
            ws.send(json.dumps({"pong": data["ping"]}))

        if "data" in data and "bids" in data["data"] and "asks" in data["data"]:
            symbol = data["dataType"].split('@')[0].replace('-', '')
            bid_price = float(data["data"]["bids"][0][0])  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            ask_price = float(data["data"]["asks"][0][0])  # –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
            if symbol in bingx_prices:
                self.prices[symbol]["bingx"] = {"bid": bid_price, "ask": ask_price}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    def on_error(self, ws, error):
        print(f"–û—à–∏–±–∫–∞ WebSocket BingX: {error}")
        self.clear_prices()  # –£–¥–∞–ª—è–µ–º —Ü–µ–Ω—ã

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    def on_close(self, ws, close_status_code, close_msg):
        logger.warning(f'WS: {ws}, Close_status_code: {close_status_code}, Close_msg: {close_msg}')
        if self.reconnect:
            logger.error(f"‚ö†Ô∏è WebSocket BingX –∑–∞–∫—Ä—ã—Ç")
            logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket BingX —á–µ—Ä–µ–∑ 5 —Å–µ–∫...")
            time.sleep(5)
            self.start()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    def clear_prices(self):
        """–£–¥–∞–ª—è–µ—Ç —Ü–µ–Ω—ã BingX –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏."""
        for symbol in self.prices:
            if "bingx" in self.prices[symbol]:
                del self.prices[symbol]["bingx"]

    # –ó–∞–ø—É—Å–∫ WebSocket
    def start(self):
        self.ws = websocket.WebSocketApp(
            BINGX_WS_URL,
            on_open=self.on_open,
            on_message=self.on_message,
            on_error=self.on_error,
            on_close=self.on_close,
        )
        self.ws.run_forever()


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def run_bingx_websocket():
        bingx_ws = BingXWebSocket(bingx_prices)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç WebSocket
        bingx_ws.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º

    bingx_thread = threading.Thread(target=run_bingx_websocket, daemon=True)
    bingx_thread.start()

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã–º
    while True:
        print(bingx_prices)
        time.sleep(1)
