import json
import websocket
import threading
import time
from concurrent.futures import ThreadPoolExecutor
from logs.logging import logger
from algoritmic_functions import build_graph, bellman_ford
from functions import  calculate_arbitrage_profit


# URL –¥–ª—è WebSocket
WS_URL = "wss://stream.bybit.com/v5/public/spot"
PAIRS = ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'XRPUSDT', 'DOGEUSDT', 'TRUMPUSDT', 'PNUTUSDT', 'SUIUSDT', 'KAITOUSDT',
         'LTCUSDT', 'IPUSDT', '1000PEPEUSDT', 'WIFUSDT', 'BANUSDT', 'FARTCOINUSDT']
BASE_CURRENCY = "USDT"  # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
FEE_RATE = 0.001  # –ö–æ–º–∏—Å—Å–∏—è 0.1%
MIN_LIQUIDITY = 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –≤ USDT
prices = {pair: {"bid": None, "ask": None, "bidSize": None, "askSize": None} for pair in PAIRS}

# url = 'wss://stream-testnet.bybit.com/v5/private'
# uri = 'wss://stream-testnet.bybit.com/v5/trade'

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def on_message(ws, message):
    data = json.loads(message)
    symbol_tag = data.get('data')

    if symbol_tag and isinstance(data["data"], dict):
        symbol = symbol_tag.get('symbol')

        bid_price = symbol_tag.get("bidPrice")
        ask_price = symbol_tag.get("askPrice")
        bid_size = symbol_tag.get("bidSize")
        ask_size = symbol_tag.get("askSize")
        last_price = symbol_tag.get("lastPrice")

        if symbol in prices:
            try:
                # –ï—Å–ª–∏ bidPrice –∏ askPrice –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º lastPrice
                if bid_price is None and last_price is not None:
                    bid_price = float(last_price) * 0.999
                if ask_price is None and last_price is not None:
                    ask_price = float(last_price) * 1.001

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ü–µ–Ω—ã
                prices[symbol]["bid"] = float(bid_price) if bid_price is not None else None
                prices[symbol]["ask"] = float(ask_price) if ask_price is not None else None
                prices[symbol]["bidSize"] = float(bid_size) if bid_size is not None else 0.0
                prices[symbol]["askSize"] = float(ask_size) if ask_size is not None else 0.0

            except ValueError:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {data['data']}")
        else:
            print(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–æ–Ω–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def on_error(ws, error):
    print(f"–û—à–∏–±–∫–∞: {error}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def on_close(ws, close_status_code, close_msg):
    print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    print(f'{close_status_code}: {close_msg}')

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
def on_open(ws):
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Bybit WebSocket")
    subscribe_msg = {
        "op": "subscribe",
        "args": [f"tickers.{pair}" for pair in PAIRS]
    }
    ws.send(json.dumps(subscribe_msg))

# –ó–∞–ø—É—Å–∫ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_websocket():
    ws = websocket.WebSocketApp(WS_URL, on_message=on_message, on_error=on_error, on_close=on_close)
    ws.on_open = on_open
    ws.run_forever()

# –ü–æ—Ç–æ–∫–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
def analyze_arbitrage():
    while True:
        graph = build_graph(prices, BASE_CURRENCY, FEE_RATE, MIN_LIQUIDITY)

        with ThreadPoolExecutor(max_workers=4) as executor:
            future = executor.submit(bellman_ford, graph, BASE_CURRENCY)
            cycle = future.result()

        if cycle:
            profit = calculate_arbitrage_profit(cycle, prices, FEE_RATE, MIN_LIQUIDITY)
            if profit == 0:
                print("‚ùå –¶–∏–∫–ª –Ω–∞–π–¥–µ–Ω, –Ω–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞!")
            else:
                logger.info("üî¥ –ù–∞–π–¥–µ–Ω –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Ü–∏–∫–ª! üîÑ", " ‚Üí ".join(cycle))
                print(f"üí∞ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: {profit:.4f} USDT")

                if profit > 1.01:
                    logger.info('üöÄ –ê—Ä–±–∏—Ç—Ä–∞–∂ –≤—ã–≥–æ–¥–µ–Ω! –°—Ç–æ–∏—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å!')
                else:
                    logger.warning('‚ö†Ô∏è –ü–æ—Å–ª–µ —É—á—ë—Ç–∞ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –ø—Ä–∏–±—ã–ª—å –º–∞–ª–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.')
        else:
            print(f"‚ö™ –ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        time.sleep(4)

# –ó–∞–ø—É—Å–∫ WebSocket
ws_thread = threading.Thread(target=run_websocket, daemon=True)
ws_thread.start()

# –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
arb_thread = threading.Thread(target=analyze_arbitrage, daemon=True)
arb_thread.start()

# –û—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Ä–∞–±–æ—Ç–∞—Ç—å
while True:
    time.sleep(1)
