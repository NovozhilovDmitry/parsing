import time
import threading
import statistics
import logging
from test_bybit import BybitWebSocket  # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit

# ----------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫ -----------------
trade_logger = logging.getLogger("trade_logger")
trade_logger.setLevel(logging.INFO)
console_output = logging.StreamHandler()
trade_handler = logging.FileHandler("logs/trading_log.txt")
trade_handler.setFormatter(logging.Formatter("%(asctime)s - %(message)s"))
trade_logger.addHandler(trade_handler)
trade_logger.addHandler(console_output)

# ----------------- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -----------------
# –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–æ–±—â–∏–π –∫–æ—à–µ–ª—ë–∫)
wallet = 1000.0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Ü–µ–Ω ‚Äì –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –º–æ–¥—É–ª–µ–º bybit.py (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
prices = {
    "BTCUSDT": {},  # –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è prices["BTCUSDT"]["bybit"]
    "ETHUSDT": {},  # –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è prices["ETHUSDT"]["bybit"]
}

# ----------------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ -----------------
SHORT_WINDOW = 5  # –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–∫–Ω–æ –¥–ª—è SMA (—Å–µ–∫—É–Ω–¥)
LONG_WINDOW = 15  # –¥–ª–∏–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è SMA (—Å–µ–∫—É–Ω–¥)
TREND_THRESHOLD = 0.0005  # 0.05% —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É SMA –¥–ª—è –≤—Ö–æ–¥–∞
PROFIT_TARGET = 0.001  # 0.1% —Ü–µ–ª–µ–≤–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –≤—ã—Ö–æ–¥–∞
MIN_INTERVAL = 10  # –º–∏–Ω–∏–º—É–º 20 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
SAMPLE_INTERVAL = 1  # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
TRADING_FEE = 0.001  # –∫–æ–º–∏—Å—Å–∏—è 0.1% –∑–∞ —Å–¥–µ–ª–∫—É (–Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥)
MIN_LIQUIDITY = 10000  # –ø–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏


# ----------------- –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è -----------------
def trading_strategy(prices):
    global wallet
    # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω (mid-—Ü–µ–Ω—ã) –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å Bybit)
    price_history = {
        "BTCUSDT": [],
        "ETHUSDT": []
    }
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: None, "long" –∏–ª–∏ "short"
    positions = {
        "BTCUSDT": None,
        "ETHUSDT": None
    }
    # –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
    entry_prices = {
        "BTCUSDT": None,
        "ETHUSDT": None
    }
    # –°—É–º–º–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å)
    trade_amount = {
        "BTCUSDT": None,
        "ETHUSDT": None
    }
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
    last_trade_time = {
        "BTCUSDT": 0,
        "ETHUSDT": 0
    }

    while True:
        now = time.time()
        for symbol in ["BTCUSDT", "ETHUSDT"]:
            bybit_data = prices.get(symbol, {}).get("bybit", {})
            bid = bybit_data.get("bid")
            ask = bybit_data.get("ask")
            liquidity = bybit_data.get("liquidity", 1e6)
            if bid is None or ask is None or liquidity < MIN_LIQUIDITY:
                continue

            mid_price = (bid + ask) / 2.0

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            price_history[symbol].append(mid_price)
            if len(price_history[symbol]) > LONG_WINDOW:
                price_history[symbol].pop(0)

            if len(price_history[symbol]) < LONG_WINDOW:
                continue

            # –í—ã—á–∏—Å–ª—è–µ–º SMA
            sma_short = statistics.mean(price_history[symbol][-SHORT_WINDOW:])
            sma_long = statistics.mean(price_history[symbol])
            print(f"{symbol}: mid={mid_price:.2f}, SMA_short={sma_short:.2f}, SMA_long={sma_long:.2f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ—à–µ–ª—ë–∫)
            if all(pos is None for pos in positions.values()) and wallet > 0 and (
                    now - last_trade_time[symbol] > MIN_INTERVAL):
                trade_logger.info(f'Wallet: {wallet}')
                # –í—Ö–æ–¥ LONG: –µ—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ SMA –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ –¥–ª–∏–Ω–Ω–æ–≥–æ SMA
                if sma_short > sma_long * (1 + TREND_THRESHOLD):
                    positions[symbol] = "long"
                    entry_prices[symbol] = mid_price
                    trade_amount[symbol] = wallet  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ—à–µ–ª—ë–∫
                    last_trade_time[symbol] = now
                    trade_logger.info(f"{symbol}: –í–•–û–î LONG –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ë–∞–ª–∞–Ω—Å: {wallet:.2f}")
                    print(f"{symbol}: –í–•–û–î LONG –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ë–∞–ª–∞–Ω—Å: {wallet:.2f}")
                    wallet = 0  # –≤–µ—Å—å –±–∞–ª–∞–Ω—Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω
                # –í—Ö–æ–¥ SHORT: –µ—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ SMA –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∂–µ –¥–ª–∏–Ω–Ω–æ–≥–æ SMA
                elif sma_short < sma_long * (1 - TREND_THRESHOLD):
                    positions[symbol] = "short"
                    entry_prices[symbol] = mid_price
                    trade_amount[symbol] = wallet  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ—à–µ–ª—ë–∫
                    last_trade_time[symbol] = now
                    trade_logger.info(f"{symbol}: –í–•–û–î SHORT –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ë–∞–ª–∞–Ω—Å: {wallet:.2f}")
                    print(f"{symbol}: –í–•–û–î SHORT –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ë–∞–ª–∞–Ω—Å: {wallet:.2f}")
                    wallet = 0
            else:
                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
                if positions[symbol] == "long":
                    # –î–ª—è LONG: –ø—Ä–∏–±—ã–ª—å = (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ - —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞) / —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                    gross_profit = (mid_price - entry_prices[symbol]) / entry_prices[symbol]
                    net_profit = gross_profit - 2 * TRADING_FEE  # –≤—ã—á–∏—Ç–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é
                    if net_profit >= PROFIT_TARGET and sma_short < sma_long:
                        new_balance = trade_amount[symbol] * (1 + net_profit)
                        print(
                            f"{symbol}: –í–´–•–û–î LONG –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}, –ø—Ä–∏–±—ã–ª—å {net_profit * 100:.2f}%, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance:.2f}")
                        trade_logger.info(
                            f"–∫—É–ø–∏–ª —Ç–æ–∫–µ–Ω {symbol} –ø–æ —Ü–µ–Ω–µ {entry_prices[symbol]:.2f}. –ü—Ä–æ–¥–∞–ª —Ç–æ–∫–µ–Ω {symbol} –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ü—Ä–∏–±—ã–ª—å {net_profit * 100:.2f}%. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance:.2f}")
                        wallet = new_balance
                        positions[symbol] = None
                        entry_prices[symbol] = None
                        trade_amount[symbol] = None
                        last_trade_time[symbol] = now
                elif positions[symbol] == "short":
                    # –î–ª—è SHORT: –ø—Ä–∏–±—ã–ª—å = (—Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞ - —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞) / —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞
                    gross_profit = (entry_prices[symbol] - mid_price) / entry_prices[symbol]
                    net_profit = gross_profit - 2 * TRADING_FEE
                    if net_profit >= PROFIT_TARGET and sma_short > sma_long:
                        new_balance = trade_amount[symbol] * (1 + net_profit)
                        print(
                            f"{symbol}: –í–´–•–û–î SHORT –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}, –ø—Ä–∏–±—ã–ª—å {net_profit * 100:.2f}%, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance:.2f}")
                        trade_logger.info(
                            f"–ø—Ä–æ–¥–∞–ª —Ç–æ–∫–µ–Ω {symbol} –ø–æ —Ü–µ–Ω–µ {entry_prices[symbol]:.2f}. –ö—É–ø–∏–ª —Ç–æ–∫–µ–Ω {symbol} –ø–æ —Ü–µ–Ω–µ {mid_price:.2f}. –ü—Ä–∏–±—ã–ª—å {net_profit * 100:.2f}%. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_balance:.2f}")
                        wallet = new_balance
                        positions[symbol] = None
                        entry_prices[symbol] = None
                        trade_amount[symbol] = None
                        last_trade_time[symbol] = now

        time.sleep(SAMPLE_INTERVAL)


# ----------------- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ WebSocket Bybit (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) -----------------
def run_bybit():
    while True:
        try:
            print("üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Bybit...")
            trade_logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Bybit...')
            ws_instance = BybitWebSocket(prices)
            ws_instance.start()
        except Exception as e:
            trade_logger.error(f'–û—à–∏–±–∫–∞ WebSocket Bybit, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥... {e}')
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket Bybit, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...", e)
            time.sleep(5)


# ----------------- –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤ -----------------
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π WebSocket Bybit –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bybit_thread = threading.Thread(target=run_bybit, daemon=True)
    bybit_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    strategy_thread = threading.Thread(target=trading_strategy, args=(prices,), daemon=True)
    strategy_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º
    while True:
        print(f'Wallet: {wallet}\n')
        time.sleep(1)
